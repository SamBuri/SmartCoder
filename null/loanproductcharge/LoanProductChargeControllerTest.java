/*
 Sam Buriima
generated by Saburi Tools
*/
package com.saburi.loan.loanproductcharge;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.saburi.root.dtos.ResponseObj;
import com.saburi.root.search.SearchCriterion;
import com.saburi.root.search.SearchOperations;
import com.saburi.root.search.SearchOptions;
import com.saburi.loan.loanproductcharge.dtos.LoanProductChargeRequest;
import java.util.List;
import java.util.Optional;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import static org.mockito.Mockito.when;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;
import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

@SpringBootTest
@AutoConfigureMockMvc
public class LoanProductChargeControllerTest{




 private MockMvc mockMvc;

    @MockBean
    private LoanProductChargeService loanProductChargeService;

    @Autowired
    private WebApplicationContext context;

    private final ObjectMapper objectMapper = new ObjectMapper();
private LoanProductCharge loanProductCharge;
@BeforeEach
    public void setup() {
        this.mockMvc = MockMvcBuilders
                .webAppContextSetup(context)
                .apply(springSecurity())
                .alwaysDo(MockMvcResultHandlers.print()).build();
 this.loanProductCharge=LoanProductCharge.builder()
.itemId("tem Id")
.itemName("ItemName")
.quantity(1000)
.unitCost(1000)
.unitPrice(1000)
.amount(1000)
.recurrent(false)
.build();
}
 @Test
    @WithMockUser
    public void shouldReturnOkWhenGivenId() throws Exception {

        when(loanProductChargeService.get(1)).thenReturn(Optional.of(loanProductCharge));
        this.mockMvc.perform(MockMvcRequestBuilders.get("/loanproductcharges/1"))
                .andExpect(MockMvcResultMatchers.status().isOk());

    }
  @Test
    @WithMockUser(roles = "loanproductcharge_all")
    public void shouldReturnPageOfLoanProductCharges() throws Exception {

        Page<LoanProductCharge> page = Mockito.mock(Page.class);
        when(loanProductChargeService.getAll(0, Optional.of(10))).thenReturn(page);
        this.mockMvc.perform(MockMvcRequestBuilders.get("/loanproductcharges")
                .queryParam("page", "0"))
                .andExpect(MockMvcResultMatchers.status().isOk());

    }
  @Test
    @WithMockUser(roles = "loanproductcharge_all")
    public void shouldReturnPageDataGivenSearchCriteria() throws Exception {

        Page<LoanProductCharge> page = Mockito.mock(Page.class);
        SearchOptions searchOptions = new SearchOptions(0, 10,
                List.of(
                        SearchCriterion
                                .builder()
                                .key("id")
                                .operation(SearchOperations.EQUAL)
                                .value("1")
                                .build())
        );


        when(loanProductChargeService.getAll(searchOptions))
                .thenReturn(page);
        this.mockMvc.perform(MockMvcRequestBuilders
                .post("/loanproductcharges/search")
                .with(csrf())
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(searchOptions)))
                .andExpect(MockMvcResultMatchers.status().isOk());

    }
@Test
    @WithMockUser(roles = "loanproductcharge_all")
    public void shouldSaveLoanProductCharge() throws Exception {

        LoanProductChargeRequest loanProductChargeRequest = Mockito.mock(LoanProductChargeRequest.class);
        ResponseObj<LoanProductCharge> res = new ResponseObj<>(true, "Saved Successfuly",
                loanProductCharge, HttpStatus.OK);

        when(loanProductChargeService.save(loanProductChargeRequest))
                .thenReturn(res);
        this.mockMvc.perform(MockMvcRequestBuilders
                .post("/loanproductcharges")
                .with(csrf())
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(loanProductCharge))
        )
                .andExpect(MockMvcResultMatchers.status().isOk());

    }
 @Test
    @WithMockUser
    public void shouldDeleteAndReturnOk() throws Exception {
        ResponseObj<LoanProductCharge> res = new ResponseObj<>(true, "Operation Successful", HttpStatus.OK);

        when(loanProductChargeService.delete(1)).thenReturn(res);
        this.mockMvc.perform(MockMvcRequestBuilders.delete("/loanproductcharges/1"));

    }
@Test
    @WithMockUser
    public void shouldUpdateAndReturnOk() throws Exception {
        ResponseObj<LoanProductCharge> res = new ResponseObj<>(true, "Operation Successful", HttpStatus.OK);
        LoanProductChargeRequest loanProductChargeRequest = Mockito.mock(LoanProductChargeRequest.class);

        when(loanProductChargeService.update(loanProductChargeRequest, 1)).thenReturn(res);
        this.mockMvc.perform(MockMvcRequestBuilders.put("/loanproductcharge_all/1"));

    }


}
