/*
 Sam Buriima
generated by Saburi Tools
*/
package com.saburi.loan.loanproductcharge;

import com.saburi.loan.loanproductcharge.dtos.LoanProductChargeRequest;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.testcontainers.service.connection.ServiceConnection;
import org.springframework.test.context.ActiveProfiles;
import org.testcontainers.containers.MySQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;
import org.testcontainers.utility.DockerImageName;


@SpringBootTest
@Testcontainers
@ActiveProfiles("test")

public class LoanProductChargeServiceTest{




 @Container
    @ServiceConnection
    static MySQLContainer mySQLContainer = new MySQLContainer<>(
            DockerImageName.parse("mysql:8.0-debian"));

    
    @Autowired
    private LoanProductChargeService loanProductChargeService;
       @BeforeEach
    public void setup() throws Exception {
        for (int i = 0; i < 3; i++) {
            loanProductChargeService.save(LoanProductChargeRequest.builder()
                    .itemId("tem Id" +i)
.itemName("ItemName" +i)
.quantity(1000)
.unitCost(1000)
.unitPrice(1000)
.amount(1000)
.recurrent(false)
.build()
            );
        }

    }
@Test
    public void shouldLoanProductCharge() throws Exception {
        try {

           
           
            
             LoanProductCharge loanProductCharge =loanProductChargeService.save(LoanProductChargeRequest.builder()
.itemId("tem Id")
.itemName("ItemName")
.quantity(1000)
.unitCost(1000)
.unitPrice(1000)
.amount(1000)
.recurrent(false)
.build()
            ).getEntity();

            System.out.println("Returned id: " + loanProductCharge.getId());
            Assertions.assertNotNull(loanProductCharge, "The returned object must not be null");
            Assertions.assertNotNull(loanProductCharge.getId(), "Id should be not be null");
            long count = loanProductChargeService.count();
            Assertions.assertEquals(4, count, "Returned records should be equal to 4");
        } catch (Exception e) {
        }

    }


}
