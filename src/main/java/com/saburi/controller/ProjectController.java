/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.controller;

import com.saburi.dataacess.ProjectDAO;
import com.saburi.model.Project;
import static com.saburi.utils.FXUIUtils.browseDirectory;
import static com.saburi.utils.FXUIUtils.browseFile;
import static com.saburi.utils.FXUIUtils.errorMessage;
import static com.saburi.utils.FXUIUtils.getInt;
import static com.saburi.utils.FXUIUtils.getText;
import static com.saburi.utils.FXUIUtils.message;
import static com.saburi.utils.FXUIUtils.validateIteger;
import java.net.URL;
import java.util.List;
import java.util.Optional;
import java.util.ResourceBundle;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;

public class ProjectController extends EditController {

    @FXML
    private TextField txtProjectID;
    @FXML
    private TextField txtProjectName;
    @FXML
    private TextField txtCommonProjectID;
    @FXML
    private TextField txtEntityPackage;
    @FXML
    private TextField txtDBAccessPackage;
    @FXML
    private TextField txtContollerPackage;
    @FXML
    private TextField txtUtilPackage;
    @FXML
    private TextField txtEnumClass;
    @FXML
    private TextField txtObjectNameClass;
    @FXML
    private TextField txtNavigationClass;

    @FXML
    private TextArea txaEntityFolder;
    @FXML
    private TextArea txaDBAcessFolder;
    @FXML
    private TextArea txaControllerFolder;
    @FXML
    private TextArea txaResourceFolder;
    @FXML
    private TextArea txaMenuControllerFile;
    @FXML
    private TextArea txaSearchTreeFile;
    @FXML
    private TextArea txaMenuUIFile;
    @FXML
    private TextArea txaSQLFile;

    @FXML
    private Button btnEntityFolder, btnDBAcessFolder, btnControllerFolder, btnResourceFolder,
            btnMenuControllerFile, btnSearchTreeFile, btnMenuUIFile, btnSQLFile;
    private final ProjectDAO oProjectDA = new ProjectDAO();

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        try {
            validateIteger(txtProjectID);
            validateIteger(txtCommonProjectID);
            txtProjectID.focusedProperty().addListener((ov, t, t1) -> {
                if (t) {
                    loadData();
                }

            });

            browseDirectory(btnEntityFolder, txaEntityFolder);
            browseDirectory(btnDBAcessFolder, txaDBAcessFolder);
            browseDirectory(btnControllerFolder, txaControllerFolder);
            browseDirectory(btnResourceFolder, txaResourceFolder);
            browseFile(btnMenuUIFile, txaMenuUIFile);
            browseFile(btnMenuControllerFile, txaMenuControllerFile);
            browseFile(btnSQLFile, txaSQLFile);
            browseFile(btnSearchTreeFile, txaSearchTreeFile);
            this.primaryKeyControl = txtProjectID;
            this.dbAccess = oProjectDA;
            //this.minSize = 360;
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void save() {
        try {
            this.editSuccessful = false;
            int projectID = getInt(txtProjectID, "Project ID");
            String projectName = getText(txtProjectName, "Project Name");
            int commonProjectID = getInt(txtCommonProjectID, "Common Project ID");
            String entityPackage = getText(txtEntityPackage, "Entity Package");
            String dBAccessPackage = getText(txtDBAccessPackage, "DB Access Package");
            String contollerPackage = getText(txtContollerPackage, "Controller Package");
            String utilPackage = getText(txtUtilPackage, "Util Package");
            String enumClass = getText(txtEnumClass, "Enum Class");
            String objectNameClass = getText(txtObjectNameClass, "Object Name Class");
            String navigationClass = getText(txtNavigationClass, "Navigation Class");
            String entityFolder = getText(txaEntityFolder, "Entity Folder");
            String dBAcessFolder = getText(txaDBAcessFolder, "DB Access Folder");
            String controllerFolder = getText(txaControllerFolder, "Controller Folder");
            String resourceFolder = getText(txaResourceFolder, "Resource Folder");
            String menuControllerFile = getText(txaMenuControllerFile, "Menu Controller File");
            String searchTreeFile = getText(txaSearchTreeFile, "Search Tree File");
            String menuUIFile = getText(txaMenuUIFile, "Menu UI File");
            String sQLFile = getText(txaSQLFile, "SQL File");

            Project project = new Project(projectID, projectName, commonProjectID, entityPackage, dBAccessPackage, contollerPackage, utilPackage, enumClass, objectNameClass, navigationClass, entityFolder, dBAcessFolder, controllerFolder, resourceFolder, menuControllerFile, searchTreeFile, menuUIFile, sQLFile);
            ProjectDAO projectDAO = new ProjectDAO(project);
            projectDAO.save();
            this.dbAccess = projectDAO;
            message("Operation: " + btnSave.getText() + "ed Successfully");

            this.editSuccessful = true;
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    
    @Override
    public void loadData() {
        try {
            if (txtProjectID.getText().isBlank()) {
                clear();
                return;
            }
            int projectID = getInt(txtProjectID, "Project ID");
            List<Project> projects = oProjectDA.read();
            Optional<Project> optionalProject = projects.parallelStream().filter(p -> (p).getProjectID() == projectID)
                    .findFirst();
            if (optionalProject.isPresent()) {
                Project project = optionalProject.get();
                txtProjectID.setText(String.valueOf(project.getProjectID()));
                txtProjectName.setText(project.getProjectName());
                txtCommonProjectID.setText(String.valueOf(project.getCommonProjectID()));
                txtEntityPackage.setText(project.getEntityPackage());
                txtDBAccessPackage.setText(project.getDBAccessPackage());
                txtContollerPackage.setText(project.getContollerPackage());
                txtUtilPackage.setText(project.getUtilPackage());
                txtEnumClass.setText(project.getEnumClass());
                txtObjectNameClass.setText(project.getObjectNameClass());
                txtNavigationClass.setText(project.getNavigationClass());
                txaEntityFolder.setText(project.getEntityFolder());
                txaDBAcessFolder.setText(project.getDBAcessFolder());
                txaControllerFolder.setText(project.getControllerFolder());
                txaResourceFolder.setText(project.getResourceFolder());
                txaMenuControllerFile.setText(project.getMenuControllerFile());
                txaSearchTreeFile.setText(project.getSearchTreeFile());
                txaMenuUIFile.setText(project.getMenuUIFile());
                txaSQLFile.setText(project.getSQLFile());

            }

        } catch (Exception e) {
            errorMessage(e);
        }

    }

    private void clear() {
        txtProjectName.clear();
        txtCommonProjectID.clear();
        txtEntityPackage.clear();
        txtDBAccessPackage.clear();
        txtContollerPackage.clear();
        txtUtilPackage.clear();
        txtEnumClass.clear();
        txtObjectNameClass.clear();
        txtNavigationClass.clear();
        txaEntityFolder.clear();
        txaDBAcessFolder.clear();
        txaControllerFolder.clear();
        txaResourceFolder.clear();
        txaMenuControllerFile.clear();
        txaSearchTreeFile.clear();
        txaMenuUIFile.clear();
        txaSQLFile.clear();

    }

}
