/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.controller;

import com.saburi.dataacess.ProjectDAO;
import com.saburi.model.Project;
import com.saburi.utils.Enums;
import com.saburi.utils.Enums.ProjectTypes;
import static com.saburi.utils.FXUIUtils.browseDirectory;
import static com.saburi.utils.FXUIUtils.browseFile;
import static com.saburi.utils.FXUIUtils.errorMessage;
import static com.saburi.utils.FXUIUtils.getSelectedValue;
import static com.saburi.utils.FXUIUtils.getText;
import static com.saburi.utils.FXUIUtils.message;
import com.saburi.utils.Utilities;
import java.net.URL;
import java.util.Arrays;
import java.util.ResourceBundle;
import java.util.stream.Collectors;
import javafx.collections.FXCollections;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;

public class ProjectController extends EditController {

    @FXML
    private ComboBox<Enums.ProjectTypes> cboProjectType;
    @FXML
    private TextField txtProjectName;
    @FXML
    private ComboBox cboCommonProjectName;
    @FXML
    private TextField txtEntityPackage;
    @FXML
    private TextField txtDBAccessPackage;
    @FXML
    private TextField txtContollerPackage;
    @FXML
    private TextField txtUtilPackage;
    @FXML
    private TextField txtEnumClass;
    @FXML
    private TextField txtObjectNameClass;
    @FXML
    private TextField txtNavigationClass, txtBasePackage;

    @FXML
    private TextArea txaEntityFolder, txaBaseFolder, txaTestFolder;
    @FXML
    private TextArea txaDBAcessFolder;
    @FXML
    private TextArea txaControllerFolder;
    @FXML
    private TextArea txaResourceFolder;
    @FXML
    private TextArea txaMenuControllerFile;
    @FXML
    private TextArea txaSearchTreeFile;
    @FXML
    private TextArea txaMenuUIFile;
    @FXML
    private TextArea txaSQLFile;

    @FXML
    private Button btnBaseFolder, btnTestFolder, btnEntityFolder, btnDBAcessFolder, btnControllerFolder, btnResourceFolder,
            btnMenuControllerFile, btnSearchTreeFile, btnMenuUIFile, btnSQLFile;
    private final ProjectDAO oProjectDA = new ProjectDAO();

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        try {

            txtProjectName.focusedProperty().addListener((ov, t, t1) -> {
                if (t) {
                    loadData();
                }

            });
            cboProjectType.setItems(FXCollections.observableArrayList(ProjectTypes.values()));
            browseDirectory(btnBaseFolder, txaBaseFolder);
            browseDirectory(btnTestFolder, txaTestFolder);
            browseDirectory(btnEntityFolder, txaEntityFolder);
            browseDirectory(btnDBAcessFolder, txaDBAcessFolder);
            browseDirectory(btnControllerFolder, txaControllerFolder);
            browseDirectory(btnResourceFolder, txaResourceFolder);
            browseFile(btnMenuUIFile, txaMenuUIFile);
            browseFile(btnMenuControllerFile, txaMenuControllerFile);
            browseFile(btnSQLFile, txaSQLFile);
            browseFile(btnSearchTreeFile, txaSearchTreeFile);
            this.primaryKeyControl = txtProjectName;
            this.dbAccess = oProjectDA;

            cboProjectType.setOnAction(e -> {

                projectTypeSeleted();

            });

            //this.minSize = 360;
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void save() {
        try {
            this.editSuccessful = false;
            String projectName = getText(txtProjectName, "Project Name");
            ProjectTypes projectType = (ProjectTypes) getSelectedValue(cboProjectType, "Project Type");
            
            boolean forceCommonProject=projectType.equals(ProjectTypes.Vue)||projectType.equals(ProjectTypes.Vue3)?false:cboCommonProjectName.getItems().size()>0;
            String commonProjectName = getText(cboCommonProjectName, "Common Project Name", forceCommonProject);
            commonProjectName =Utilities.isNullOrEmpty(commonProjectName)?projectName:commonProjectName;
            boolean isDesktop = projectType.equals(ProjectTypes.Desktop);
           
            String basePackage = getText(txtBasePackage, "Base Package",!forceCommonProject);
            String baseFolder = getText(txaBaseFolder, "Base Folder");
            String testFolder = getText(txaTestFolder, "Test Folder");

            String entityPackage = getText(txtEntityPackage, "Entity Package", isDesktop);
            String dBAccessPackage = getText(txtDBAccessPackage, "DB Access Package", isDesktop);
            String contollerPackage = getText(txtContollerPackage, "Controller Package", isDesktop);
            String utilPackage = getText(txtUtilPackage, "Util Package", isDesktop);
            String enumClass = getText(txtEnumClass, "Enum Class", isDesktop);
            String objectNameClass = getText(txtObjectNameClass, "Object Name Class", isDesktop);
            String navigationClass = getText(txtNavigationClass, "Navigation Class", isDesktop);
            String entityFolder = getText(txaEntityFolder, "Entity Folder", isDesktop);
            String dBAcessFolder = getText(txaDBAcessFolder, "DB Access Folder", isDesktop);
            String controllerFolder = getText(txaControllerFolder, "Controller Folder", isDesktop);
            String resourceFolder = getText(txaResourceFolder, "Resource Folder", isDesktop);
            String menuControllerFile = getText(txaMenuControllerFile, "Menu Controller File", isDesktop);
            String searchTreeFile = getText(txaSearchTreeFile, "Search Tree File", isDesktop);
            String menuUIFile = getText(txaMenuUIFile, "Menu UI File", isDesktop);
            String sQLFile = getText(txaSQLFile, "SQL File", isDesktop);

            Project project = new Project(projectType, projectName, basePackage, baseFolder, testFolder, commonProjectName, entityPackage, dBAccessPackage, contollerPackage, utilPackage, enumClass, objectNameClass, navigationClass, entityFolder, dBAcessFolder, controllerFolder, resourceFolder, menuControllerFile, searchTreeFile, menuUIFile, sQLFile);
            ProjectDAO projectDAO = new ProjectDAO(project);
            projectDAO.save();
            this.dbAccess = projectDAO;
            message("Operation: " + btnSave.getText() + "ed Successfully");

            this.editSuccessful = true;
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    public void loadData() {
        try {
            clear(Arrays.asList(txtProjectName));
            if (txtProjectName.getText().isBlank()) {
                return;
            }
            String projectName = getText(txtProjectName, "Project Name");
            Project project = oProjectDA.get(projectName);
            if (project != null) {
                txtProjectName.setText(String.valueOf(project.getProjectName()));
                cboProjectType.setValue(project.getProjectType());
                txtProjectName.setText(project.getProjectName());
                txtBasePackage.setText(project.getBasePackage());
                txaBaseFolder.setText(project.getBaseFolder());
                txaTestFolder.setText(project.getTestFolder());
                cboCommonProjectName.setValue(project.getCommonProjectName());
                txtEntityPackage.setText(project.getEntityPackage());
                txtDBAccessPackage.setText(project.getDBAccessPackage());
                txtContollerPackage.setText(project.getContollerPackage());
                txtUtilPackage.setText(project.getUtilPackage());
                txtEnumClass.setText(project.getEnumClass());
                txtObjectNameClass.setText(project.getObjectNameClass());
                txtNavigationClass.setText(project.getNavigationClass());
                txaEntityFolder.setText(project.getEntityFolder());
                txaDBAcessFolder.setText(project.getDBAcessFolder());
                txaControllerFolder.setText(project.getControllerFolder());
                txaResourceFolder.setText(project.getResourceFolder());
                txaMenuControllerFile.setText(project.getMenuControllerFile());
                txaSearchTreeFile.setText(project.getSearchTreeFile());
                txaMenuUIFile.setText(project.getMenuUIFile());
                txaSQLFile.setText(project.getSQLFile());
                
                this.projectTypeSeleted();

            }

        } catch (Exception e) {
            errorMessage(e);
        }

    }

    private void projectTypeSeleted() {
        try {
            ProjectTypes projectType = cboProjectType.getValue();

            cboCommonProjectName.setItems(FXCollections.observableList(oProjectDA.read()
                    .stream()
                    .filter((p) -> projectType != null ? p.getProjectType().equals(projectType) : true)
                    .map(Project::getProjectName)
                    .collect(Collectors.toList())));
        } catch (Exception ex) {
            errorMessage(ex);
        }

    }
}
